import { type NextRequest, NextResponse } from "next/server"

export async function POST(request: NextRequest) {
  try {
    const { content, title, formats = ["pdf", "docx"] } = await request.json()

    if (!content) {
      return NextResponse.json({ error: "Content is required for document generation" }, { status: 400 })
    }

    const files = []

    for (const format of formats) {
      let mimeType: string
      let fileExtension: string

      switch (format.toLowerCase()) {
        case "pdf":
          mimeType = "application/pdf"
          fileExtension = "pdf"
          break
        case "docx":
        case "word":
          mimeType = "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
          fileExtension = "docx"
          break
        default:
          continue // Skip unsupported formats
      }

      let fileContent: Buffer

      if (format.toLowerCase() === "pdf") {
        // Enhanced PDF generation for AI documents
        const { jsPDF } = await import("jspdf")

        const doc = new jsPDF({
          orientation: "portrait",
          unit: "mm",
          format: "a4",
        })

        // Professional header with Aramco branding
        doc.setFillColor(0, 102, 51) // Aramco green
        doc.rect(0, 0, 210, 30, "F")

        // Company branding
        doc.setFillColor(255, 255, 255)
        doc.rect(15, 7.5, 15, 15, "F")
        doc.setFontSize(8)
        doc.setTextColor(0, 102, 51)
        doc.text("AI", 20, 17)

        doc.setFontSize(18)
        doc.setFont("helvetica", "bold")
        doc.setTextColor(255, 255, 255)
        doc.text("ARAMCO DIGITAL AI", 35, 18)

        // Document title
        doc.setFontSize(22)
        doc.setFont("helvetica", "bold")
        doc.setTextColor(0, 0, 0)
        doc.text(title || "AI GENERATED DOCUMENT", 20, 45)

        // Professional line
        doc.setLineWidth(1.5)
        doc.setDrawColor(0, 102, 51)
        doc.line(20, 50, 190, 50)

        // AI generation badge
        doc.setFillColor(0, 102, 51)
        doc.roundedRect(20, 55, 40, 8, 2, 2, "F")
        doc.setFontSize(8)
        doc.setTextColor(255, 255, 255)
        doc.text("AI GENERATED", 22, 60)

        // Timestamp
        doc.setFontSize(10)
        doc.setTextColor(100, 100, 100)
        doc.text(`Generated: ${new Date().toLocaleString()}`, 20, 70)

        // Content processing
        doc.setFontSize(11)
        doc.setFont("helvetica", "normal")
        doc.setTextColor(0, 0, 0)

        const pageWidth = 170
        const lineHeight = 6
        let yPosition = 80

        const cleanContent = content
          .replace(/\n\s*\n/g, "\n\n")
          .replace(/\t/g, "    ")
          .trim()

        const sections = cleanContent.split(/\n\n+/)

        sections.forEach((section) => {
          const trimmedSection = section.trim()
          if (!trimmedSection) return

          const isHeader = /^[A-Z\s\d.-]{5,50}$/.test(trimmedSection) || /^\d+\./.test(trimmedSection)

          if (isHeader) {
            if (yPosition > 80) yPosition += 5
            doc.setFont("helvetica", "bold")
            doc.setFontSize(12)
            doc.setTextColor(0, 102, 51)
          } else {
            doc.setFont("helvetica", "normal")
            doc.setFontSize(11)
            doc.setTextColor(0, 0, 0)
          }

          const lines = doc.splitTextToSize(trimmedSection, pageWidth)

          lines.forEach((line) => {
            if (yPosition > 270) {
              doc.addPage()
              yPosition = 20
            }
            doc.text(line, 20, yPosition)
            yPosition += lineHeight
          })

          yPosition += 4
        })

        // Professional footer
        const pageCount = doc.getNumberOfPages()
        for (let i = 1; i <= pageCount; i++) {
          doc.setPage(i)

          doc.setLineWidth(0.5)
          doc.setDrawColor(200, 200, 200)
          doc.line(20, 285, 190, 285)

          doc.setFontSize(8)
          doc.setFont("helvetica", "normal")
          doc.setTextColor(100, 100, 100)
          doc.text("Generated by Aramco Digital AI Assistant", 20, 292)
          doc.text(`Page ${i} of ${pageCount}`, 160, 292)
        }

        const pdfBuffer = doc.output("arraybuffer")
        fileContent = Buffer.from(pdfBuffer)
      } else if (format.toLowerCase() === "docx") {
        // Enhanced Word document for AI generation
        const { Document, Packer, Paragraph, TextRun, HeadingLevel, AlignmentType } = await import("docx")

        const paragraphs = content.split(/\n\s*\n/).filter((p) => p.trim())

        const docParagraphs = [
          // AI Header
          new Paragraph({
            children: [
              new TextRun({
                text: "ARAMCO DIGITAL AI ASSISTANT",
                bold: true,
                size: 28,
                color: "006633",
              }),
            ],
            heading: HeadingLevel.TITLE,
            alignment: AlignmentType.CENTER,
            spacing: { after: 200 },
          }),

          // AI Badge
          new Paragraph({
            children: [
              new TextRun({
                text: "ðŸ¤– AI GENERATED DOCUMENT",
                bold: true,
                size: 16,
                color: "006633",
              }),
            ],
            alignment: AlignmentType.CENTER,
            spacing: { after: 300 },
          }),

          // Title
          new Paragraph({
            children: [
              new TextRun({
                text: title || "AI GENERATED DOCUMENT",
                bold: true,
                size: 32,
                underline: {},
              }),
            ],
            heading: HeadingLevel.HEADING_1,
            alignment: AlignmentType.CENTER,
            spacing: { after: 400 },
          }),

          // Timestamp
          new Paragraph({
            children: [
              new TextRun({
                text: `Generated on ${new Date().toLocaleString()}`,
                italics: true,
                size: 20,
                color: "666666",
              }),
            ],
            alignment: AlignmentType.CENTER,
            spacing: { after: 400 },
          }),
        ]

        // Process content paragraphs
        paragraphs.forEach((paragraph) => {
          const trimmed = paragraph.trim()
          if (!trimmed) return

          const isHeader = /^[A-Z\s\d.-]{5,50}$/.test(trimmed) || /^\d+\./.test(trimmed)

          if (isHeader) {
            docParagraphs.push(
              new Paragraph({
                children: [
                  new TextRun({
                    text: trimmed,
                    bold: true,
                    size: 24,
                    color: "006633",
                  }),
                ],
                heading: HeadingLevel.HEADING_2,
                spacing: { before: 300, after: 200 },
              }),
            )
          } else {
            docParagraphs.push(
              new Paragraph({
                children: [
                  new TextRun({
                    text: trimmed,
                    size: 22,
                  }),
                ],
                spacing: { after: 200 },
                alignment: AlignmentType.JUSTIFIED,
              }),
            )
          }
        })

        // AI Footer
        docParagraphs.push(
          new Paragraph({
            children: [
              new TextRun({
                text: `This document was generated by Aramco Digital AI Assistant using advanced language models. Generated on ${new Date().toLocaleDateString()}.`,
                italics: true,
                size: 18,
                color: "666666",
              }),
            ],
            spacing: { before: 600 },
            alignment: AlignmentType.CENTER,
          }),
        )

        const doc = new Document({
          sections: [
            {
              properties: {
                page: {
                  margin: {
                    top: 1440,
                    right: 1440,
                    bottom: 1440,
                    left: 1440,
                  },
                },
              },
              children: docParagraphs,
            },
          ],
        })

        const buffer = await Packer.toBuffer(doc)
        fileContent = buffer
      }

      // Create filename
      const timestamp = new Date().toISOString().split("T")[0]
      const cleanTitle = (title || "ai_document").replace(/[^a-zA-Z0-9]/g, "_")
      const filename = `AI_${cleanTitle}_${timestamp}.${fileExtension}`

      // Store file temporarily with better URL structure
      const fileId = `ai_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
      const downloadUrl = `/api/ai/download-file?id=${fileId}&content=${encodeURIComponent(fileContent.toString("base64"))}&filename=${encodeURIComponent(filename)}&type=${encodeURIComponent(mimeType)}`

      files.push({
        name: filename,
        type: format.toLowerCase(),
        downloadUrl,
        size: fileContent.length,
      })
    }

    return NextResponse.json({
      success: true,
      files,
      message: `Generated ${files.length} professional document(s) successfully`,
    })
  } catch (error) {
    console.error("Document generation error:", error)
    return NextResponse.json(
      {
        error: "Failed to generate document",
        details: process.env.NODE_ENV === "development" ? error.message : undefined,
      },
      { status: 500 },
    )
  }
}
